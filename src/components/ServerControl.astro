---
import Card from './Card.astro';
---

<Card title="🎮 Control del Servidor" className="server-control">
  <div class="flex items-center gap-3 mb-6 p-3 bg-stone-700 rounded-lg" id="server-status">
    <div class="w-4 h-4 rounded-full bg-red-500 opacity-100 animate-pulse"
         id="status-light"
         style="box-shadow: 0 0 10px rgba(239, 68, 68, 0.7);"></div>
    <span class="text-lg font-semibold text-green-300 font-mono" id="status-text">Verificando...</span>
  </div>

  <div class="grid grid-cols-2 gap-3 mb-6">
    <button class="px-4 py-3 rounded-lg font-bold text-white transition-all duration-200 border-2 font-mono hover:-translate-y-0.5 hover:shadow-lg hover:shadow-black/30 disabled:opacity-50 disabled:cursor-not-allowed"
            style="background-color: #22c55e; border-color: #22c55e; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            onmouseover="this.style.backgroundColor='#16a34a'"
            onmouseout="this.style.backgroundColor='#22c55e'"
            id="start-btn" data-action="start">
      ▶️ Iniciar
    </button>

    <button class="px-4 py-3 rounded-lg font-bold text-white transition-all duration-200 border-2 font-mono hover:-translate-y-0.5 hover:shadow-lg hover:shadow-black/30 disabled:opacity-50 disabled:cursor-not-allowed bg-red-600 hover:bg-red-700 border-red-500"
            style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            id="stop-btn" data-action="stop">
      ⏹️ Detener
    </button>

    <button class="px-4 py-3 rounded-lg font-bold text-white transition-all duration-200 border-2 font-mono hover:-translate-y-0.5 hover:shadow-lg hover:shadow-black/30 disabled:opacity-50 disabled:cursor-not-allowed bg-blue-600 hover:bg-blue-700 border-blue-500"
            style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            id="restart-btn" data-action="restart">
      🔄 Reiniciar
    </button>

    <button class="px-4 py-3 rounded-lg font-bold text-white transition-all duration-200 border-2 font-mono hover:-translate-y-0.5 hover:shadow-lg hover:shadow-black/30 disabled:opacity-50 disabled:cursor-not-allowed bg-purple-600 hover:bg-purple-700 border-purple-500"
            style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            id="refresh-btn" data-action="status">
      🔍 Estado
    </button>
  </div>

  <div class="space-y-2" id="server-info">
    <div class="flex justify-between items-center p-2 bg-stone-700 rounded">
      <span class="text-gray-300 font-medium">Estado:</span>
      <span class="text-green-400 font-mono" id="server-state">-</span>
    </div>
    <div class="flex justify-between items-center p-2 bg-stone-700 rounded">
      <span class="text-gray-300 font-medium">Última actualización:</span>
      <span class="text-green-400 font-mono" id="last-update">-</span>
    </div>
  </div>
</Card>

<script>
  import { minecraftAPI } from '../services/api.js';

  class ServerControl {
    private statusLight: HTMLElement | null;
    private statusText: HTMLElement | null;
    private serverState: HTMLElement | null;
    private lastUpdate: HTMLElement | null;

    constructor() {
      this.statusLight = document.getElementById('status-light');
      this.statusText = document.getElementById('status-text');
      this.serverState = document.getElementById('server-state');
      this.lastUpdate = document.getElementById('last-update');

      this.initEventListeners();
      this.checkServerStatus();

      // Auto-refresh every 30 seconds
      setInterval(() => this.checkServerStatus(), 30000);
    }

    initEventListeners() {
      document.querySelectorAll('.action-btn, [data-action]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLButtonElement;
          const action = target.dataset.action;
          if (action) {
            this.handleAction(action);
          }
        });
      });
    }

    async handleAction(action: string) {
      const button = document.querySelector(`[data-action="${action}"]`) as HTMLButtonElement;
      const originalText = button?.textContent || '';

      try {
        if (button) {
          button.disabled = true;
          button.textContent = '⏳ Procesando...';
        }

        let response;
        switch(action) {
          case 'start':
            response = await minecraftAPI.startServer();
            break;
          case 'stop':
            response = await minecraftAPI.stopServer();
            break;
          case 'restart':
            response = await minecraftAPI.restartServer();
            break;
          case 'status':
            response = await minecraftAPI.getServerStatus();
            break;
        }

        if (response.success) {
          this.showNotification(response.message, 'success');
          if (action !== 'status') {
            setTimeout(() => this.checkServerStatus(), 2000);
          } else {
            this.updateStatus(response);
          }
        } else {
          this.showNotification(response.message || 'Error en la operación', 'error');
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
        this.showNotification(`Error: ${errorMessage}`, 'error');
      } finally {
        if (button) {
          button.disabled = false;
          button.textContent = originalText;
        }
      }
    }

    async checkServerStatus() {
      try {
        this.setLoading(true);
        const response = await minecraftAPI.getServerStatus();
        this.updateStatus(response);
      } catch (error) {
        this.setOffline();
        console.error('Error checking server status:', error);
      } finally {
        this.setLoading(false);
      }
    }

    updateStatus(response: any) {
      if (response.success) {
        const isRunning = response.running || response.status === 'running';

        if (this.statusLight) {
          this.statusLight.className = `w-4 h-4 rounded-full opacity-100 animate-pulse ${isRunning ? 'bg-green-500' : 'bg-red-500'}`;
          this.statusLight.style.boxShadow = isRunning
            ? '0 0 10px rgba(34, 197, 94, 0.7)'
            : '0 0 10px rgba(239, 68, 68, 0.7)';
        }
        if (this.statusText) this.statusText.textContent = isRunning ? 'Servidor Online' : 'Servidor Offline';
        if (this.serverState) this.serverState.textContent = response.status || 'unknown';
        if (this.lastUpdate) this.lastUpdate.textContent = new Date().toLocaleTimeString();
      }
    }

    setLoading(loading: boolean) {
      if (loading) {
        if (this.statusLight) {
          this.statusLight.className = 'w-4 h-4 rounded-full bg-yellow-500 opacity-100 animate-pulse';
          this.statusLight.style.boxShadow = '0 0 10px rgba(234, 179, 8, 0.7)';
        }
        if (this.statusText) this.statusText.textContent = 'Verificando estado...';
      }
    }

    setOffline() {
      if (this.statusLight) {
        this.statusLight.className = 'w-4 h-4 rounded-full bg-red-500 opacity-100 animate-pulse';
        this.statusLight.style.boxShadow = '0 0 10px rgba(239, 68, 68, 0.7)';
      }
      if (this.statusText) this.statusText.textContent = 'Error de conexión';
      if (this.serverState) this.serverState.textContent = 'unknown';
    }

    showNotification(message: string, type: string) {
      // Create a simple notification
      const notification = document.createElement('div');
      notification.className = `fixed top-5 right-5 px-6 py-3 rounded-lg text-white font-bold z-50 transition-all duration-300 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
      notification.textContent = message;
      notification.style.animation = 'slideInRight 0.3s ease-out';

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ServerControl();
  });
</script>
