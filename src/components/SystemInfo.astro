---
import Card from './Card.astro';
---

<Card title="💻 Información del Sistema">
  <div class="space-y-4" id="system-stats">
    <div class="flex items-center gap-4 p-4 bg-stone-700 rounded-lg border border-stone-600">
      <div class="text-3xl" style="filter: drop-shadow(0 0 8px rgba(34, 197, 94, 0.5));">🧠</div>
      <div class="flex-1">
        <div class="text-gray-300 text-sm font-medium mb-1 font-mono">Memoria RAM</div>
        <div class="text-green-400 text-lg font-bold font-mono"
             style="text-shadow: 0 0 8px rgba(34, 197, 94, 0.5);"
             id="memory-usage">Cargando...</div>
        <div class="w-full h-2 bg-stone-800 rounded-full mt-2 overflow-hidden">
          <div class="h-full transition-all duration-500 bg-gradient-to-r from-green-500 to-green-600"
               style="box-shadow: 0 0 8px rgba(34, 197, 94, 0.5);"
               id="memory-progress"></div>
        </div>
      </div>
    </div>

    <div class="flex items-center gap-4 p-4 bg-stone-700 rounded-lg border border-stone-600">
      <div class="text-3xl" style="filter: drop-shadow(0 0 8px rgba(34, 197, 94, 0.5));">💽</div>
      <div class="flex-1">
        <div class="text-gray-300 text-sm font-medium mb-1 font-mono">Disco</div>
        <div class="text-green-400 text-lg font-bold font-mono"
             style="text-shadow: 0 0 8px rgba(34, 197, 94, 0.5);"
             id="disk-usage">Cargando...</div>
      </div>
    </div>

    <div class="flex items-center gap-4 p-4 bg-stone-700 rounded-lg border border-stone-600">
      <div class="text-3xl" style="filter: drop-shadow(0 0 8px rgba(34, 197, 94, 0.5));">⏱️</div>
      <div class="flex-1">
        <div class="text-gray-300 text-sm font-medium mb-1 font-mono">Tiempo Activo</div>
        <div class="text-green-400 text-lg font-bold font-mono"
             style="text-shadow: 0 0 8px rgba(34, 197, 94, 0.5);"
             id="uptime">Cargando...</div>
      </div>
    </div>

    <div class="flex items-center gap-4 p-4 bg-stone-700 rounded-lg border border-stone-600">
      <div class="text-3xl" style="filter: drop-shadow(0 0 8px rgba(34, 197, 94, 0.5));">🌐</div>
      <div class="flex-1">
        <div class="text-gray-300 text-sm font-medium mb-1 font-mono">Estado API</div>
        <div class="text-green-400 text-lg font-bold font-mono"
             style="text-shadow: 0 0 8px rgba(34, 197, 94, 0.5);"
             id="api-status">Verificando...</div>
      </div>
    </div>
  </div>

  <div class="mt-6 text-center">
    <button class="px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-all duration-200 font-semibold border-2 border-purple-500 font-mono hover:-translate-y-0.5 hover:shadow-lg hover:shadow-black/30"
            style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            id="refresh-system">
      🔄 Actualizar Información
    </button>
  </div>
</Card>

<script>
  import { minecraftAPI } from '../services/api.js';

  class SystemInfo {
    private memoryUsage: HTMLElement | null;
    private memoryProgress: HTMLElement | null;
    private diskUsage: HTMLElement | null;
    private uptime: HTMLElement | null;
    private apiStatus: HTMLElement | null;
    private refreshBtn: HTMLElement | null;

    constructor() {
      this.memoryUsage = document.getElementById('memory-usage');
      this.memoryProgress = document.getElementById('memory-progress');
      this.diskUsage = document.getElementById('disk-usage');
      this.uptime = document.getElementById('uptime');
      this.apiStatus = document.getElementById('api-status');
      this.refreshBtn = document.getElementById('refresh-system');

      this.initEventListeners();
      this.loadSystemInfo();

      // Auto-refresh every 30 seconds
      setInterval(() => this.loadSystemInfo(), 30000);
    }

    initEventListeners() {
      this.refreshBtn?.addEventListener('click', () => this.loadSystemInfo());
    }

    async loadSystemInfo() {
      try {
        // Check API health first
        await this.checkAPIHealth();

        // Load system information
        const response = await minecraftAPI.getSystemInfo();

        if (response.success) {
          this.updateSystemStats(response.system);
        } else {
          this.showError();
        }
      } catch (error) {
        console.error('Error loading system info:', error);
        this.showError();
      }
    }

    async checkAPIHealth() {
      try {
        const response = await minecraftAPI.getHealth();
        if (this.apiStatus) {
          if (response.success) {
            this.apiStatus.textContent = '🟢 Online';
            this.apiStatus.className = 'text-green-400 text-lg font-bold font-mono';
            this.apiStatus.style.textShadow = '0 0 8px rgba(34, 197, 94, 0.5)';
          } else {
            this.apiStatus.textContent = '🔴 Error';
            this.apiStatus.className = 'text-red-400 text-lg font-bold font-mono';
            this.apiStatus.style.textShadow = '0 0 8px rgba(239, 68, 68, 0.5)';
          }
        }
      } catch (error) {
        if (this.apiStatus) {
          this.apiStatus.textContent = '🔴 Offline';
          this.apiStatus.className = 'text-red-400 text-lg font-bold font-mono';
          this.apiStatus.style.textShadow = '0 0 8px rgba(239, 68, 68, 0.5)';
        }
      }
    }

    updateSystemStats(system: any) {
      // Update memory information
      if (system.memory && this.memoryUsage && this.memoryProgress) {
        const { total, used, percentage } = system.memory;
        this.memoryUsage.textContent = `${used}MB / ${total}MB (${percentage}%)`;
        this.memoryProgress.style.width = `${percentage}%`;

        // Change color based on usage
        if (percentage > 80) {
          this.memoryProgress.className = 'h-full transition-all duration-500 bg-gradient-to-r from-red-500 to-red-600';
          this.memoryProgress.style.boxShadow = '0 0 8px rgba(239, 68, 68, 0.5)';
        } else if (percentage > 60) {
          this.memoryProgress.className = 'h-full transition-all duration-500 bg-gradient-to-r from-yellow-500 to-yellow-600';
          this.memoryProgress.style.boxShadow = '0 0 8px rgba(234, 179, 8, 0.5)';
        } else {
          this.memoryProgress.className = 'h-full transition-all duration-500 bg-gradient-to-r from-green-500 to-green-600';
          this.memoryProgress.style.boxShadow = '0 0 8px rgba(34, 197, 94, 0.5)';
        }
      }

      // Update disk usage
      if (system.disk && this.diskUsage) {
        this.diskUsage.textContent = system.disk.usage || 'N/A';
      }

      // Update uptime
      if (system.uptime && this.uptime) {
        this.uptime.textContent = system.uptime;
      }
    }

    showError() {
      if (this.memoryUsage) this.memoryUsage.textContent = 'Error';
      if (this.diskUsage) this.diskUsage.textContent = 'Error';
      if (this.uptime) this.uptime.textContent = 'Error';
      if (this.memoryProgress) this.memoryProgress.style.width = '0%';
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SystemInfo();
  });
</script>
