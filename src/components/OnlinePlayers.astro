---
import Card from './Card.astro';
---

<Card title="üë• Jugadores en L√≠nea">
  <div class="flex justify-between items-center mb-4">
    <div class="flex items-center gap-2">
      <span class="text-gray-300 text-sm font-medium font-mono">Total:</span>
      <span class="text-green-400 font-bold text-lg font-mono" id="players-count">0</span>
    </div>
    <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-all duration-200 text-sm font-mono border border-blue-500 hover:-translate-y-0.5 hover:shadow-md"
            style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
            id="refresh-players">
      üîÑ Actualizar
    </button>
  </div>

  <div class="w-full h-80 bg-black border-2 border-stone-600 rounded-lg overflow-hidden relative"
       style="background-image: radial-gradient(circle at 1px 1px, rgba(0, 255, 0, 0.1) 1px, transparent 0); background-size: 10px 10px;">

    <div class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-green-500/50 to-transparent"></div>

    <div class="h-full overflow-y-auto p-4"
         id="players-container"
         style="scrollbar-width: thin; scrollbar-color: rgba(34, 197, 94, 0.5) rgba(41, 37, 36, 0.8);">
      <div class="flex items-center justify-center h-full text-gray-500">
        <span class="animate-pulse">‚è≥ Cargando jugadores...</span>
      </div>
    </div>
  </div>

  <div class="mt-4 flex items-center gap-2 text-xs text-gray-400 font-mono">
    <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
    <span id="players-status">Actualizando cada 30 segundos</span>
  </div>
</Card>

<script>
  import { minecraftAPI } from '../services/api.js';

  interface Player {
    name: string;
    joinedAt: Date;
    isOnline: boolean;
  }

  class OnlinePlayers {
    private playersContainer: HTMLElement | null;
    private playersCount: HTMLElement | null;
    private refreshBtn: HTMLElement | null;
    private playersStatus: HTMLElement | null;
    private autoRefreshInterval: ReturnType<typeof setInterval> | null = null;
    private onlinePlayers: Map<string, Player> = new Map();

    constructor() {
      this.playersContainer = document.getElementById('players-container');
      this.playersCount = document.getElementById('players-count');
      this.refreshBtn = document.getElementById('refresh-players');
      this.playersStatus = document.getElementById('players-status');

      this.initEventListeners();
      this.loadPlayers();
      this.startAutoRefresh();
    }

    initEventListeners() {
      this.refreshBtn?.addEventListener('click', () => this.loadPlayers());
    }

    startAutoRefresh() {
      this.autoRefreshInterval = setInterval(() => {
        this.loadPlayers(false);
      }, 30000);
    }

    async loadPlayers(show: boolean = true) {
      try {
        if (show && this.playersStatus) {
          this.playersStatus.textContent = 'Cargando jugadores...';
        }

        // Primero verificar si el servidor est√° corriendo
        const serverStatus = await minecraftAPI.getServerStatus();

        // Obtener m√°s logs para tener mejor historial
        const response = await minecraftAPI.getLogs(200);

        if (response.success && response.logs && this.playersContainer) {
          console.log(`Procesando ${response.logs.length} l√≠neas de logs para jugadores online`);

          // Si el servidor est√° apagado, limpiar todos los jugadores
          if (serverStatus.success && !serverStatus.running) {
            console.log('Servidor apagado - limpiando todos los jugadores');
            this.onlinePlayers.clear();
          } else {
            this.parsePlayersFromLogs(response.logs);
          }

          this.displayPlayers();
          if (this.playersStatus) {
            this.playersStatus.textContent = `√öltima actualizaci√≥n: ${new Date().toLocaleTimeString()}`;
          }
        } else {
          this.showError('Error al cargar jugadores');
          console.error('Error en respuesta de logs:', response);
        }
      } catch (error) {
        console.error('Error loading players:', error);
        this.showError('Error de conexi√≥n');
      }
    }

    parsePlayersFromLogs(logs: string[]) {
      // Patrones espec√≠ficos para Minecraft Bedrock Server
      const connectPattern = /Player connected: ([^,]+), xuid:/i;
      const disconnectPattern = /Player disconnected: ([^,]+), xuid:/i;

      // Patrones para detectar reinicio del servidor
      const serverStartPatterns = [
        /Starting Server/i,
        /Server started/i,
        /Starting up/i,
        /Starting Minecraft server/i,
        /Minecraft server version/i,
        /Server is starting/i,
        /Level Name:/i,
        /Starting dedicated server/i
      ];

      // Limpiar la lista de jugadores online antes de procesar
      this.onlinePlayers.clear();

      // Encontrar el √≠ndice del √∫ltimo reinicio del servidor
      let lastRestartIndex = -1;
      for (let i = logs.length - 1; i >= 0; i--) {
        const log = logs[i];
        if (serverStartPatterns.some(pattern => pattern.test(log))) {
          lastRestartIndex = i;
          break;
        }
      }

      // Si no encontramos un reinicio, usar todos los logs disponibles
      const logsToProcess = lastRestartIndex >= 0 ? logs.slice(lastRestartIndex) : logs;

      console.log(`Procesando ${logsToProcess.length} l√≠neas de logs desde el √∫ltimo reinicio (√≠ndice ${lastRestartIndex})`);

      // Extraer todos los eventos de conexi√≥n/desconexi√≥n con sus timestamps
      const events: { playerName: string, action: 'connect' | 'disconnect', timestamp: Date, logLine: string }[] = [];

      for (const log of logsToProcess) {
        const timestamp = this.extractTimestamp(log);

        // Verificar conexiones
        const connectMatch = log.match(connectPattern);
        if (connectMatch) {
          const playerName = connectMatch[1].trim();
          if (playerName) {
            events.push({ playerName, action: 'connect', timestamp, logLine: log });
          }
        }

        // Verificar desconexiones
        const disconnectMatch = log.match(disconnectPattern);
        if (disconnectMatch) {
          const playerName = disconnectMatch[1].trim();
          if (playerName) {
            events.push({ playerName, action: 'disconnect', timestamp, logLine: log });
          }
        }
      }

      // Ordenar eventos por timestamp (m√°s antiguo primero)
      events.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

      // Procesar eventos en orden cronol√≥gico para determinar el estado actual
      const playerStates = new Map<string, { action: 'connect' | 'disconnect', timestamp: Date }>();

      for (const event of events) {
        playerStates.set(event.playerName, {
          action: event.action,
          timestamp: event.timestamp
        });
      }

      // Determinar jugadores actualmente online bas√°ndose en la √∫ltima acci√≥n desde el reinicio
      for (const [playerName, state] of playerStates) {
        if (state.action === 'connect') {
          this.onlinePlayers.set(playerName, {
            name: playerName,
            joinedAt: state.timestamp,
            isOnline: true
          });
        }
      }

      console.log(`Eventos procesados desde √∫ltimo reinicio: ${events.length} total`);
      console.log('Estados finales de jugadores:');
      for (const [name, state] of playerStates) {
        console.log(`  ${name}: ${state.action} a las ${state.timestamp.toLocaleTimeString()}`);
      }
      console.log(`Jugadores online detectados: ${this.onlinePlayers.size}`);
      if (this.onlinePlayers.size > 0) {
        console.log('Jugadores online:', Array.from(this.onlinePlayers.keys()));
      }
    }

    extractTimestamp(log: string): Date {
      // Buscar timestamps en formato [YYYY-MM-DD HH:MM:SS:mmm INFO]
      const fullTimestampMatch = log.match(/\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}):\d{3} INFO\]/);
      if (fullTimestampMatch) {
        const timestamp = fullTimestampMatch[1];
        return new Date(timestamp);
      }

      // Fallback: buscar solo tiempo [HH:MM:SS]
      const timeMatch = log.match(/\[(\d{2}:\d{2}:\d{2})\]/);
      if (timeMatch) {
        const time = timeMatch[1];
        const today = new Date();
        const [hours, minutes, seconds] = time.split(':').map(Number);
        today.setHours(hours, minutes, seconds, 0);
        return today;
      }

      return new Date();
    }

    displayPlayers() {
      if (!this.playersContainer || !this.playersCount) return;

      const playersList = Array.from(this.onlinePlayers.values());
      const onlineCount = playersList.length;

      this.playersCount.textContent = onlineCount.toString();

      if (onlineCount === 0) {
        this.playersContainer.innerHTML = `
          <div class="flex flex-col items-center justify-center h-full text-gray-500">
            <div class="text-6xl mb-4">üèúÔ∏è</div>
            <div class="text-lg font-mono">No hay jugadores en l√≠nea</div>
            <div class="text-sm opacity-75 mt-2">El servidor est√° esperando jugadores</div>
          </div>
        `;
        return;
      }

      // Ordenar jugadores por tiempo de conexi√≥n (m√°s reciente primero)
      playersList.sort((a, b) => b.joinedAt.getTime() - a.joinedAt.getTime());

      const playersHTML = playersList.map((player, index) => {
        const timeOnline = this.getTimeOnline(player.joinedAt);
        const avatarColor = this.getPlayerColor(player.name);

        return `
          <div class="flex items-center justify-between p-3 mb-3 bg-stone-700 rounded-lg border border-stone-600 hover:bg-stone-600 transition-colors duration-200"
               style="animation: fadeInUp 0.3s ease-out ${index * 0.1}s both;">
            <div class="flex items-center gap-3">
              <div class="w-10 h-10 rounded-full flex items-center justify-center text-white font-bold text-lg border-2 border-stone-500"
                   style="background: ${avatarColor}; box-shadow: 0 0 10px ${avatarColor}50;">
                ${player.name.charAt(0).toUpperCase()}
              </div>
              <div>
                <div class="text-green-400 font-bold font-mono text-lg">${player.name}</div>
                <div class="text-gray-400 text-sm font-mono">Conectado: ${timeOnline}</div>
              </div>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"
                   style="box-shadow: 0 0 8px rgba(34, 197, 94, 0.7);"></div>
              <span class="text-green-400 font-mono text-sm">Online</span>
            </div>
          </div>
        `;
      }).join('');

      this.playersContainer.innerHTML = playersHTML;
    }

    getTimeOnline(joinedAt: Date): string {
      const now = new Date();
      const diff = now.getTime() - joinedAt.getTime();
      const minutes = Math.floor(diff / (1000 * 60));
      const hours = Math.floor(minutes / 60);

      if (hours > 0) {
        return `${hours}h ${minutes % 60}m`;
      } else if (minutes > 0) {
        return `${minutes}m`;
      } else {
        return 'Ahora mismo';
      }
    }

    getPlayerColor(name: string): string {
      const colors = [
        '#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16',
        '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9',
        '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef',
        '#ec4899', '#f43f5e'
      ];

      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
      }

      return colors[Math.abs(hash) % colors.length];
    }

    showError(message: string) {
      if (this.playersContainer) {
        this.playersContainer.innerHTML = `
          <div class="flex items-center justify-center h-full text-red-400">
            <span>‚ùå ${message}</span>
          </div>
        `;
      }
      if (this.playersStatus) {
        this.playersStatus.textContent = message;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new OnlinePlayers();
  });
</script>

<style>
  /* Custom scrollbar styles for Webkit browsers */
  #players-container::-webkit-scrollbar {
    width: 8px;
  }

  #players-container::-webkit-scrollbar-track {
    background: rgba(41, 37, 36, 0.8);
    border-radius: 4px;
  }

  #players-container::-webkit-scrollbar-thumb {
    background: rgba(34, 197, 94, 0.5);
    border-radius: 4px;
  }

  #players-container::-webkit-scrollbar-thumb:hover {
    background: rgba(34, 197, 94, 0.7);
  }

  /* Animation keyframes */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
