---
import Card from './Card.astro';
---

<Card title="🌐 IP del Servidor">
  <div class="space-y-4">
    <!-- Server IP Display -->
    <div class="bg-black/40 rounded-lg p-4 border border-stone-600">
      <div class="flex justify-between items-center mb-3">
        <span class="text-gray-300 text-sm font-medium font-mono">IP del Servidor:</span>
        <button
          id="copy-ip-button"
          class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded transition-all duration-200 text-sm font-mono border border-blue-500 hover:-translate-y-0.5 hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
          style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
        >

            <span id="ip-button-text">📋 Copiar</span>
          </>
        </button>
      </div>
      <div class="font-mono text-lg text-green-400 break-all bg-stone-700 px-3 py-2 rounded" id="server-ip">
        mancosfc.ddns.net
      </div>
    </div>

    <!-- Server Port Display -->
    <div class="bg-black/40 rounded-lg p-4 border border-stone-600">
      <div class="flex justify-between items-center mb-3">
        <span class="text-gray-300 text-sm font-medium font-mono">Puerto:</span>
        <button
          id="copy-port-button"
          class="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded transition-all duration-200 text-sm font-mono border border-purple-500 hover:-translate-y-0.5 hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
          style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
        >
          <span class="flex items-center gap-2">
            
            <span id="port-button-text">📋 Copiar</span>
          </span>
        </button>
      </div>
      <div class="font-mono text-lg text-green-400 bg-stone-700 px-3 py-2 rounded" id="server-port">
        19132
      </div>
    </div>

    <!-- Full Server Address -->
    <div class="bg-black/40 rounded-lg p-4 border border-stone-600">
      <div class="flex justify-between items-center mb-3">
        <span class="text-gray-300 text-sm font-medium font-mono">Dirección Completa:</span>
        <button
          id="copy-full-button"
          class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded transition-all duration-200 text-sm font-mono border border-green-500 hover:-translate-y-0.5 hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
          style="text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);"
        >

            <span id="full-button-text">📋 Copiar</span>
          </>
        </button>
      </div>
      <div class="font-mono text-lg text-green-400 bg-stone-700 px-3 py-2 rounded break-all" id="server-full">
        mancosfc.ddns.net:19132
      </div>
    </div>

    <!-- Status Message -->
    <div id="status-message" class="text-center text-sm text-gray-400 opacity-0 transition-opacity duration-300 font-mono">
    </div>
  </div>
</Card>

<script>
    class ServerIPComponent {
    private copyIPButton: HTMLButtonElement | null = null;
    private copyPortButton: HTMLButtonElement | null = null;
    private copyFullButton: HTMLButtonElement | null = null;
    private ipButtonText: HTMLElement | null = null;
    private portButtonText: HTMLElement | null = null;
    private fullButtonText: HTMLElement | null = null;
    private statusMessage: HTMLElement | null = null;

    private readonly serverIP = 'mancosfc.ddns.net';
    private readonly serverPort = '19132';

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
    }

    private initializeElements(): void {
      this.copyIPButton = document.getElementById('copy-ip-button') as HTMLButtonElement;
      this.copyPortButton = document.getElementById('copy-port-button') as HTMLButtonElement;
      this.copyFullButton = document.getElementById('copy-full-button') as HTMLButtonElement;
      this.ipButtonText = document.getElementById('ip-button-text');
      this.portButtonText = document.getElementById('port-button-text');
      this.fullButtonText = document.getElementById('full-button-text');
      this.statusMessage = document.getElementById('status-message');
    }

    private setupEventListeners(): void {
      if (this.copyIPButton) {
        this.copyIPButton.addEventListener('click', () => this.copyToClipboard(this.serverIP, 'ip'));
      }
      if (this.copyPortButton) {
        this.copyPortButton.addEventListener('click', () => this.copyToClipboard(this.serverPort, 'port'));
      }
      if (this.copyFullButton) {
        this.copyFullButton.addEventListener('click', () => this.copyToClipboard(`${this.serverIP}:${this.serverPort}`, 'full'));
      }
    }

        private async copyToClipboard(text: string, type: 'ip' | 'port' | 'full'): Promise<void> {
      try {
        if (!navigator.clipboard) {
          // Fallback for older browsers
          this.fallbackCopyTextToClipboard(text, type);
          return;
        }

        await navigator.clipboard.writeText(text);
        this.showSuccessMessage(type);
      } catch (error) {
        console.error('Failed to copy to clipboard:', error);
        this.showErrorMessage(type);
      }
    }

    private fallbackCopyTextToClipboard(text: string, type: 'ip' | 'port' | 'full'): void {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        const successful = document.execCommand('copy');
        if (successful) {
          this.showSuccessMessage(type);
        } else {
          this.showErrorMessage(type);
        }
      } catch (error) {
        console.error('Fallback: Failed to copy to clipboard:', error);
        this.showErrorMessage(type);
      }

      document.body.removeChild(textArea);
    }

    private showSuccessMessage(type: 'ip' | 'port' | 'full'): void {
      const messages = {
        ip: 'IP copiada al portapapeles!',
        port: 'Puerto copiado al portapapeles!',
        full: 'Dirección completa copiada al portapapeles!'
      };

      this.updateButton(type, '✓ Copiado!', 'text-green-300');
      this.showStatus(messages[type], 'text-green-400');

      setTimeout(() => {
        this.resetButton(type);
        this.hideStatus();
      }, 2000);
    }

    private showErrorMessage(type: 'ip' | 'port' | 'full'): void {
      this.updateButton(type, '⚠ Error', 'text-red-300');
      this.showStatus('Error al copiar. Inténtalo de nuevo.', 'text-red-400');

      setTimeout(() => {
        this.resetButton(type);
        this.hideStatus();
      }, 2000);
    }

    private updateButton(type: 'ip' | 'port' | 'full', text: string, colorClass: string): void {
      const buttons = {
        ip: { button: this.copyIPButton, text: this.ipButtonText },
        port: { button: this.copyPortButton, text: this.portButtonText },
        full: { button: this.copyFullButton, text: this.fullButtonText }
      };

      const buttonConfig = buttons[type];
      if (buttonConfig.button && buttonConfig.text) {
        buttonConfig.text.textContent = text;
        buttonConfig.button.disabled = true;
        buttonConfig.text.className = colorClass;
      }
    }

    private resetButton(type: 'ip' | 'port' | 'full'): void {
      const buttonConfigs = {
        ip: { button: this.copyIPButton, text: this.ipButtonText, originalText: '📋 Copiar' },
        port: { button: this.copyPortButton, text: this.portButtonText, originalText: '📋 Copiar' },
        full: { button: this.copyFullButton, text: this.fullButtonText, originalText: '📋 Copiar' }
      };

      const buttonConfig = buttonConfigs[type];
      if (buttonConfig.button && buttonConfig.text) {
        buttonConfig.text.textContent = buttonConfig.originalText;
        buttonConfig.button.disabled = false;
        buttonConfig.text.className = '';
      }
    }

    private showStatus(message: string, colorClass: string): void {
      if (this.statusMessage) {
        this.statusMessage.textContent = message;
        this.statusMessage.className = `text-center text-sm ${colorClass} opacity-100 transition-opacity duration-300`;
      }
    }

    private hideStatus(): void {
      if (this.statusMessage) {
        this.statusMessage.className = 'text-center text-sm text-gray-400 opacity-0 transition-opacity duration-300';
      }
    }
  }

  // Initialize the component when the DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ServerIPComponent();
    });
  } else {
    new ServerIPComponent();
  }
</script>
